# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# Default prompt title
#if [ "$color_prompt" = yes ]; then
#    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
#else
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
#fi
# Add git branch if its present to PS1

parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
if [ "$color_prompt" = yes ]; then
    PS1='\[\033[01;34m\]\w\[\033[01;31m\]$(parse_git_branch)\[\033[00m\]\$ '
else
    PS1='\w$(parse_git_branch)\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# benbash             #
alias bb=". ~/.local/bin/benbash/benbash.sh"
# benbash END #
# bashmarks             #
 source ~/.local/bin/bashmarks.sh
# bashmarks END #

# Clipboard
cb() {
    if command -v clip.exe &> /dev/null; then
        realpath $1 | clip.exe
    else
        realpath $1 | wl-copy 
    fi
}
cbx() {
    cb $1
    exit
}
# End Clipboard

# Open current directory in an window explorer or Chromium
if command -v explorer.exe &> /dev/null; then
    alias e="explorer.exe ."
else
    alias e="chromium ."
fi

alias lx='mkdir -p .tex; pdflatex -output-directory .tex'
alias ls='ls -1'
alias put='git pull && git add -A && git commit -m "put: quick commit and push update" && git push'

# QR8: Find root of context by tag
q() { 
    bb "@.*$1"
}
Q() {
    bb "@.*\.$1"
}

# Project Mangement

    # Shows numbered list of sorted xpf files.
    alias pb='find . -name "*xpf*md" -printf "%f\n" | sort | nl'

    # Shows today's xpf files: file name onluy and full path.
    alias pbt='find . -name "$(date +%Y%m%d)*xpf*md" -printf "%f\n"'
    alias pbtx='find . -name "$(date +%Y%m%d)*xpf*md"'

    # Jump to xpf file.
    pbj () {
        # If argument 2 does not exist, then default to 1.
        INDEX=1
        if [ -n "$1" ]
        then
            INDEX=$1
        fi
        #echo "Index is ${INDEX}" 
        
        FILE_NAME=`find . -name "*xpf*md" -printf "%f\n" | sort | sed -n "${INDEX}p"`
        #echo "File Name is ${FILE_NAME}."

        if [[ $1 =~ ^[0-9]+ ]];
        then
            bb $FILE_NAME
            if [ -n "$2" -a "$2" = "v" ]; then
                vim $FILE_NAME
            fi
        fi
    }

    # Open xpf file in VIM
    pbv () {
        # If argument 2 does not exist, then default to 1.
        INDEX=1
        if [ -n "$1" ]
        then
            INDEX=$1
        fi
        #echo "Index is ${INDEX}" 
        
        FILE_NAME=`find . -name "*xpf*md" -printf "%f\n" | sort | sed -n "${INDEX}p"`
        #echo "File Name is ${FILE_NAME}."

        FULL_PATH=`find . -name ${FILE_NAME}`
        #echo "Full Path  is ${FULL_PATH}."

        vim ${FULL_PATH}
    }

    # Open xpf file in VIM
    pbx () {
        # If argument 2 does not exist, then default to 1.
        INDEX=1
        if [ -n "$1" ]
        then
            INDEX=$1
        fi
        #echo "Index is ${INDEX}" 
        
        FILE_NAME=`find . -name "*xpf*md" -printf "%f\n" | sort | sed -n "${INDEX}p"`
        #echo "File Name is ${FILE_NAME}."

        FULL_PATH=`find ~+ -type f -name ${FILE_NAME}`
        #echo "Full Path  is ${FULL_PATH}."
        
        cb ${FULL_PATH}

        exit
    }

    # Update xpf files.
    pbu() {        

        # If argument 2 does not exist, then default to 1.
        INDEX=1
        if [ -n "$2" ]
        then
            INDEX=$2
        fi
        #echo "Index is ${INDEX}" 
        
        FILE_NAME=`find . -name "*xpf*md" -printf "%f\n" | sort | sed -n "${INDEX}p"`
        #echo "File Name is ${FILE_NAME}."
        
        # Get the full file path of the xpf file.
        if [[ -n ${FILE_NAME} ]] # note that double brackets [[ work better here for -n non-zero checking.
        then
            FULL_PATH=`find . -name ${FILE_NAME}`
            #echo "Full Path  is ${FULL_PATH}."
            
            # Get the directory
            PROJECT_DIRECTORY="${FULL_PATH%${FILE_NAME}}"
            #echo "Project directory is ${PROJECT_DIRECTORY}."

            PROJECT_DATE=${FILE_NAME%%-*}
        fi

        TODAY=`date +%Y%m%d`

        case $1 in
            [A-Z])
                # If argument 1 is letter, then it relates to status.
                #echo "$PROJECT_DIRECTORY$PROJECT_DATE-$1-${FILE_NAME#*-[A-Za-z]-}"
                mv $FULL_PATH "$PROJECT_DIRECTORY$PROJECT_DATE-$1-${FILE_NAME#*-[A-Za-z]-}"
                ;;
            [0-9] | [0-9][0-9])
                # If argument 1 is a seven digit number, then it relates to update deadline.
                #echo "Here is the new file: $PROJECT_DIRECTORY$1${FILE_NAME##*[0-9]}"
                YEAR=`date +%Y`
                MONTH=`date +%m`
                DAY=`date +%d`
                # add "#0" to day number variables to mitigate octal typing
                if (( ${1#0} < ${DAY#0} )); then
                    printf -v MONTH "%02d" "$(( $MONTH % 12 + 1 ))"
                    if (( $MONTH == 1)); then
                        printf -v YEAR "%04d" "$(( $YEAR + 1 ))"
                    fi
                fi
                # add "#0" to day number variables to mitigate octal typing
                printf -v DAY "%02d" "${1#0}"
                NEWDATE="$YEAR$MONTH$DAY"
                #echo "New data is $NEWDATE"
                mv $FULL_PATH "$PROJECT_DIRECTORY$NEWDATE${FILE_NAME#[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]}"
                ;;
            [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9])
                # If argument 1 is a seven digit number, then it relates to update deadline.
                #echo "Here is the new file: $PROJECT_DIRECTORY$1${FILE_NAME##*[0-9]}"
                mv $FULL_PATH "$PROJECT_DIRECTORY$1${FILE_NAME#[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]}"
                ;;
            archive)
                # If argument 1 is is command archive, archive file.
                ARCHIVAL_TARGET="${PROJECT_DIRECTORY}archive/$PROJECT_DATE-Z-${FILE_NAME#*-[A-Za-z]-}"
                ARCHIVAL_FULL_PATH=${ARCHIVAL_TARGET/xpf/apf}
                #echo $ARCHIVAL_FULL_PATH
                #echo "${PROJECT_DIRECTORY}archive"
                #echo ${FULL_PATH}
                mkdir -p "${PROJECT_DIRECTORY}archive"
                mv ${FULL_PATH} $ARCHIVAL_FULL_PATH
                echo "* **Archive Date**: $TODAY" >> $ARCHIVAL_FULL_PATH
                ;;
            *)
                # If argument 1 is a full named xpf file (properly formatted), then copy from templates, and add title and date to file.
                # [YYYYMMdd]-[Once letter status]-[5 letter code, underscore-padded]-[Project Title (w/ underscores as spaces)].xpf.md
                if [[ $1 =~ ^[0-9]{8}-[A-Za-z_]-[A-Za-z0-9_]{5}-[A-Za-z0-9_]+\.xpf\.md ]];
                    then 
                        cp ~/templates/PROJECT.xpf.md $1
                        echo "* **Original Date**: $TODAY" >> $1
                        sed -i "1s/^/# $1 \n/" $1
                    else
                        echo "no found execution path";
                fi
                ;;
        esac

        pb
    }
# END Project Mangement

QB_HOME=~/projects/memoir
# qbash accessories #
alias delegate=". ~/.local/bin/qbash/delegate.sh"
# qbash END #
# qbash             #
alias qb=". ~/.local/bin/qbash/qbash.sh"
# qbash END #
